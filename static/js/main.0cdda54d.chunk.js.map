{"version":3,"sources":["Form/form.js","App.js","serviceWorker.js","index.js"],"names":["formComponent","props","submitHandler","event","preventDefault","name","state","age","department","gender","alert","Number","changeHandler","nam","target","val","value","setState","check","bind","className","type","onChange","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSA6EeA,G,wDAzEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,cAAgB,SAACC,GACbA,EAAMC,iBACN,IAAIC,EAAO,EAAKC,MAAMD,KAClBE,EAAM,EAAKD,MAAMC,IACjBC,EAAa,EAAKF,MAAME,WAClB,EAAKF,MAAMG,OAET,KAATJ,EACHK,MAAM,wBACU,KAARH,GAAgBI,OAAOJ,GAER,KAAfC,EACRE,MAAM,8BAENA,MAAM,SAAUL,EAAM,8CAA+CG,EAAY,iDAAkDD,GAJnIG,MAAM,mBAtBS,EA8BnBE,cAAgB,SAACT,GACb,IAAIU,EAAMV,EAAMW,OAAOT,KACnBU,EAAMZ,EAAMW,OAAOE,MACvB,EAAKC,SAAL,eACIJ,EAAME,KAhCV,EAAKT,MAAQ,CACTD,KAAM,GACNE,IAAK,KACLE,OAAQ,OACRD,WAAY,GACZU,OAAO,GAEX,EAAKhB,cAAciB,KAAnB,gBATe,E,qDAuCf,OACI,8BACI,yBAAKC,UAAY,OACjB,8CAEI,2BAAQC,KAAO,OAAOhB,KAAO,OAAOiB,SAAaC,KAAKX,iBAE1D,6CAEI,2BAAOS,KAAO,OAAOhB,KAAO,MAAMiB,SAAaC,KAAKX,iBAExD,oDAEI,2BAAOS,KAAO,OAAOhB,KAAO,aAAaiB,SAAaC,KAAKX,iBAE/D,iDAEI,2BAAOS,KAAO,QAAQhB,KAAO,SAC7BW,MAAQ,OAAOM,SAAaC,KAAKX,gBAHrC,OAII,2BAAOS,KAAO,QAAQhB,KAAO,SAC7BW,MAAQ,SAASM,SAAaC,KAAKX,gBALvC,SAMI,2BAAOS,KAAO,QAAQhB,KAAO,SAC7BW,MAAQ,SAASM,SAAaC,KAAKX,gBAPvC,UASA,2BACI,4BAAQQ,UAAY,SAASI,QAAWD,KAAKrB,eAA7C,WAEJ,6BAAM,mC,GAnEMuB,cCYbC,MAZf,WACE,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,2BACE,kBAAC,EAAD,UCIUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0cdda54d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Style.css';\r\n\r\nclass formComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            age: null,\r\n            gender: 'male',\r\n            department: '',\r\n            check: false\r\n        }\r\n        this.submitHandler.bind(this);\r\n    }\r\n    \r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        let name = this.state.name;\r\n        let age = this.state.age;\r\n        let department = this.state.department;\r\n        let gen = this.state.gender;\r\n\r\n        if(name === '')\r\n        alert(\"Name is not provided\");\r\n        else if(age === '' || (!Number(age)))\r\n        alert(\"Age is invalid\");\r\n        else if(department === '')\r\n        alert(\"Department is not provided\");\r\n        else\r\n        alert(\"Hello \"+ name +\"! You have successfully registered for the \"+ department +\" department successfully at the bright age of \"+ age );\r\n        \r\n    }\r\n\r\n    changeHandler = (event) => {\r\n        let nam = event.target.name\r\n        let val = event.target.value\r\n        this.setState({\r\n           [nam]: val\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className = 'lbl'>\r\n                <p>\r\n                    Enter your name: \r\n                    <input  type = 'text' name = 'name' onChange = { this.changeHandler } />\r\n                </p>\r\n                <p>\r\n                Enter your age: \r\n                    <input type = 'text' name = 'age' onChange = { this.changeHandler } />\r\n                </p>\r\n                <p>\r\n                Enter your department: \r\n                    <input type = 'text' name = 'department' onChange = { this.changeHandler } />\r\n                </p>\r\n                <p>\r\n                Select your gender: \r\n                    <input type = 'radio' name = 'gender' \r\n                    value = 'male' onChange = { this.changeHandler } />Male\r\n                    <input type = 'radio' name = 'gender' \r\n                    value = 'female' onChange = { this.changeHandler } />Female\r\n                    <input type = 'radio' name = 'gender' \r\n                    value = 'secret' onChange = { this.changeHandler } />Secret\r\n                </p>\r\n                <p>\r\n                    <button className = 'button' onClick = {this.submitHandler}>Submit</button>\r\n                </p>\r\n                <br /><br />\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default formComponent;","import React from 'react';\nimport './App.css';\nimport Form from './Form/form';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          <Form />\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}